import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import React, { useRef, useEffect, useState } from "react";
import { canUseDOM, twLoad, useShallowCompareMemoize, removeChildrenWithAttribute, twWidgetFactory, cloneShallow } from "./utils";

if (canUseDOM) {
  twLoad();
}

var childDivIdentifyingAttribute = "twdiv";

function useTwitterWidget(factoryFunctionName, primaryArg, options, onLoad) {
  var _useState = useState(null),
      error = _useState[0],
      setError = _useState[1];

  var ref = useRef(null); // noop if ssr

  if (!canUseDOM) {
    return {
      ref: ref,
      error: error
    };
  } // Make deps for useEffect.
  // options, and possibly primaryArg, are objects that should be compared (shallow).
  // There currently aren't any nested arrays or objects, so they
  // can be cloned in a shallow manner.
  // NOTE onLoad is used in useCallback, but it is not listed as a dependency.
  // Listing it would likely cause unnecessary loads. The latest onLoad should be
  // used regardless, since it will not be called unless the other dependencies
  // change, so it works out.


  var deps = [factoryFunctionName, useShallowCompareMemoize(primaryArg), useShallowCompareMemoize(options)];
  useEffect(function () {
    // Reset error
    setError(null); // Protect against race conditions
    // (set to true in cleanup function;
    // checked if canceled in async loadWidget)

    var isCanceled = false;

    if (ref.current) {
      var loadWidget = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var childEl, wf, resultMaybe;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(!ref || !ref.current)) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt("return");

                case 2:
                  childEl = document.createElement("div");
                  childEl.setAttribute(childDivIdentifyingAttribute, "yes");
                  ref.current.appendChild(childEl);
                  _context.prev = 5;
                  _context.next = 8;
                  return twWidgetFactory();

                case 8:
                  wf = _context.sent;
                  _context.next = 11;
                  return wf[factoryFunctionName](cloneShallow(primaryArg), childEl, cloneShallow(options));

                case 11:
                  resultMaybe = _context.sent;

                  if (!(!resultMaybe && !isCanceled)) {
                    _context.next = 14;
                    break;
                  }

                  throw new Error("Twitter could not create widget. If it is a Timeline or " + "Tweet, ensure the screenName/tweetId exists.");

                case 14:
                  _context.next = 21;
                  break;

                case 16:
                  _context.prev = 16;
                  _context.t0 = _context["catch"](5);
                  console.error(_context.t0);
                  setError(_context.t0);
                  return _context.abrupt("return");

                case 21:
                  if (!(!ref || !ref.current)) {
                    _context.next = 23;
                    break;
                  }

                  return _context.abrupt("return");

                case 23:
                  if (!isCanceled) {
                    _context.next = 26;
                    break;
                  }

                  if (childEl) {
                    childEl.remove();
                  }

                  return _context.abrupt("return");

                case 26:
                  if (onLoad) {
                    onLoad();
                  }

                case 27:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[5, 16]]);
        }));

        return function loadWidget() {
          return _ref.apply(this, arguments);
        };
      }();

      removeChildrenWithAttribute(ref.current, childDivIdentifyingAttribute);
      loadWidget();
    }

    return function () {
      isCanceled = true;
    };
  }, deps);
  return {
    ref: ref,
    error: error
  };
}

export var Follow = function Follow(_ref2) {
  var username = _ref2.username,
      options = _ref2.options,
      onLoad = _ref2.onLoad,
      renderError = _ref2.renderError;

  var _useTwitterWidget = useTwitterWidget("createFollowButton", username, options, onLoad),
      ref = _useTwitterWidget.ref,
      error = _useTwitterWidget.error;

  return /*#__PURE__*/React.createElement("div", {
    ref: ref
  }, error && renderError && renderError(error));
};
export var Hashtag = function Hashtag(_ref3) {
  var hashtag = _ref3.hashtag,
      options = _ref3.options,
      onLoad = _ref3.onLoad,
      renderError = _ref3.renderError;

  var _useTwitterWidget2 = useTwitterWidget("createHashtagButton", hashtag, options, onLoad),
      ref = _useTwitterWidget2.ref,
      error = _useTwitterWidget2.error;

  return /*#__PURE__*/React.createElement("div", {
    ref: ref
  }, error && renderError && renderError(error));
};
export var Mention = function Mention(_ref4) {
  var username = _ref4.username,
      options = _ref4.options,
      onLoad = _ref4.onLoad,
      renderError = _ref4.renderError;

  var _useTwitterWidget3 = useTwitterWidget("createMentionButton", username, options, onLoad),
      ref = _useTwitterWidget3.ref,
      error = _useTwitterWidget3.error;

  return /*#__PURE__*/React.createElement("div", {
    ref: ref
  }, error && renderError && renderError(error));
};
export var Share = function Share(_ref5) {
  var url = _ref5.url,
      options = _ref5.options,
      onLoad = _ref5.onLoad,
      renderError = _ref5.renderError;

  var _useTwitterWidget4 = useTwitterWidget("createShareButton", url, options, onLoad),
      ref = _useTwitterWidget4.ref,
      error = _useTwitterWidget4.error;

  return /*#__PURE__*/React.createElement("div", {
    ref: ref
  }, error && renderError && renderError(error));
};
export var Timeline = function Timeline(_ref6) {
  var dataSource = _ref6.dataSource,
      options = _ref6.options,
      onLoad = _ref6.onLoad,
      renderError = _ref6.renderError;

  var _useTwitterWidget5 = useTwitterWidget("createTimeline", dataSource, options, onLoad),
      ref = _useTwitterWidget5.ref,
      error = _useTwitterWidget5.error;

  return /*#__PURE__*/React.createElement("div", {
    ref: ref
  }, error && renderError && renderError(error));
};
export var Tweet = function Tweet(_ref7) {
  var tweetId = _ref7.tweetId,
      options = _ref7.options,
      onLoad = _ref7.onLoad,
      renderError = _ref7.renderError;

  var _useTwitterWidget6 = useTwitterWidget("createTweet", tweetId, options, onLoad),
      ref = _useTwitterWidget6.ref,
      error = _useTwitterWidget6.error;

  return /*#__PURE__*/React.createElement("div", {
    ref: ref
  }, error && renderError && renderError(error));
};